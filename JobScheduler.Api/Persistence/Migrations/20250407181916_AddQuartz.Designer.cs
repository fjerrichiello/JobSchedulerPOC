// <auto-generated />
using System;
using JobScheduler.Api.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobScheduler.Api.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250407181916_AddQuartz")]
    partial class AddQuartz
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId", "Title")
                        .IsUnique();

                    b.ToTable("Books");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.BookRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("NewTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId", "NewTitle", "ApprovalStatus")
                        .IsUnique()
                        .HasFilter("\"ApprovalStatus\" = 'Pending'");

                    b.HasIndex("AuthorId", "Title", "ApprovalStatus")
                        .IsUnique()
                        .HasFilter("\"ApprovalStatus\" = 'Pending'");

                    b.ToTable("BookRequests");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzBlobTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnType("text")
                        .HasColumnName("sched_name");

                    b.Property<string>("TriggerName")
                        .HasColumnType("text")
                        .HasColumnName("trigger_name");

                    b.Property<string>("TriggerGroup")
                        .HasColumnType("text")
                        .HasColumnName("trigger_group");

                    b.Property<byte[]>("BlobData")
                        .HasColumnType("bytea")
                        .HasColumnName("blob_data");

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.ToTable("qrtz_blob_triggers");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzCalendar", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnType("text")
                        .HasColumnName("sched_name");

                    b.Property<string>("CalendarName")
                        .HasColumnType("text")
                        .HasColumnName("calendar_name");

                    b.Property<byte[]>("Calendar")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("calendar");

                    b.HasKey("SchedName", "CalendarName");

                    b.ToTable("qrtz_calendars");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzCronTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnType("text")
                        .HasColumnName("sched_name");

                    b.Property<string>("TriggerName")
                        .HasColumnType("text")
                        .HasColumnName("trigger_name");

                    b.Property<string>("TriggerGroup")
                        .HasColumnType("text")
                        .HasColumnName("trigger_group");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cron_expression");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("text")
                        .HasColumnName("time_zone_id");

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.ToTable("qrtz_cron_triggers");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzFiredTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnType("text")
                        .HasColumnName("sched_name");

                    b.Property<string>("EntryId")
                        .HasColumnType("text")
                        .HasColumnName("entry_id");

                    b.Property<long>("FiredTime")
                        .HasColumnType("bigint")
                        .HasColumnName("fired_time");

                    b.Property<string>("InstanceName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("instance_name");

                    b.Property<bool>("IsNonconcurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_nonconcurrent");

                    b.Property<string>("JobGroup")
                        .HasColumnType("text")
                        .HasColumnName("job_group");

                    b.Property<string>("JobName")
                        .HasColumnType("text")
                        .HasColumnName("job_name");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<bool?>("RequestsRecovery")
                        .HasColumnType("boolean")
                        .HasColumnName("requests_recovery");

                    b.Property<long>("SchedTime")
                        .HasColumnType("bigint")
                        .HasColumnName("sched_time");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("TriggerGroup")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("trigger_group");

                    b.Property<string>("TriggerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("trigger_name");

                    b.HasKey("SchedName", "EntryId");

                    b.HasIndex(new[] { "JobGroup" }, "idx_qrtz_ft_job_group");

                    b.HasIndex(new[] { "JobName" }, "idx_qrtz_ft_job_name");

                    b.HasIndex(new[] { "RequestsRecovery" }, "idx_qrtz_ft_job_req_recovery");

                    b.HasIndex(new[] { "TriggerGroup" }, "idx_qrtz_ft_trig_group");

                    b.HasIndex(new[] { "InstanceName" }, "idx_qrtz_ft_trig_inst_name");

                    b.HasIndex(new[] { "TriggerName" }, "idx_qrtz_ft_trig_name");

                    b.HasIndex(new[] { "SchedName", "TriggerName", "TriggerGroup" }, "idx_qrtz_ft_trig_nm_gp");

                    b.ToTable("qrtz_fired_triggers");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzJobDetail", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnType("text")
                        .HasColumnName("sched_name");

                    b.Property<string>("JobName")
                        .HasColumnType("text")
                        .HasColumnName("job_name");

                    b.Property<string>("JobGroup")
                        .HasColumnType("text")
                        .HasColumnName("job_group");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDurable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_durable");

                    b.Property<bool>("IsNonconcurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_nonconcurrent");

                    b.Property<bool>("IsUpdateData")
                        .HasColumnType("boolean")
                        .HasColumnName("is_update_data");

                    b.Property<string>("JobClassName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("job_class_name");

                    b.Property<byte[]>("JobData")
                        .HasColumnType("bytea")
                        .HasColumnName("job_data");

                    b.Property<bool>("RequestsRecovery")
                        .HasColumnType("boolean")
                        .HasColumnName("requests_recovery");

                    b.HasKey("SchedName", "JobName", "JobGroup");

                    b.HasIndex(new[] { "RequestsRecovery" }, "idx_qrtz_j_req_recovery");

                    b.ToTable("qrtz_job_details");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzLock", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnType("text")
                        .HasColumnName("sched_name");

                    b.Property<string>("LockName")
                        .HasColumnType("text")
                        .HasColumnName("lock_name");

                    b.HasKey("SchedName", "LockName");

                    b.ToTable("qrtz_locks");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzPausedTriggerGroup", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnType("text")
                        .HasColumnName("sched_name");

                    b.Property<string>("TriggerGroup")
                        .HasColumnType("text")
                        .HasColumnName("trigger_group");

                    b.HasKey("SchedName", "TriggerGroup");

                    b.ToTable("qrtz_paused_trigger_grps");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzSchedulerState", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnType("text")
                        .HasColumnName("sched_name");

                    b.Property<string>("InstanceName")
                        .HasColumnType("text")
                        .HasColumnName("instance_name");

                    b.Property<long>("CheckinInterval")
                        .HasColumnType("bigint")
                        .HasColumnName("checkin_interval");

                    b.Property<long>("LastCheckinTime")
                        .HasColumnType("bigint")
                        .HasColumnName("last_checkin_time");

                    b.HasKey("SchedName", "InstanceName");

                    b.ToTable("qrtz_scheduler_state");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzSimpleTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnType("text")
                        .HasColumnName("sched_name");

                    b.Property<string>("TriggerName")
                        .HasColumnType("text")
                        .HasColumnName("trigger_name");

                    b.Property<string>("TriggerGroup")
                        .HasColumnType("text")
                        .HasColumnName("trigger_group");

                    b.Property<long>("RepeatCount")
                        .HasColumnType("bigint")
                        .HasColumnName("repeat_count");

                    b.Property<long>("RepeatInterval")
                        .HasColumnType("bigint")
                        .HasColumnName("repeat_interval");

                    b.Property<long>("TimesTriggered")
                        .HasColumnType("bigint")
                        .HasColumnName("times_triggered");

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.ToTable("qrtz_simple_triggers");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzSimpropTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnType("text")
                        .HasColumnName("sched_name");

                    b.Property<string>("TriggerName")
                        .HasColumnType("text")
                        .HasColumnName("trigger_name");

                    b.Property<string>("TriggerGroup")
                        .HasColumnType("text")
                        .HasColumnName("trigger_group");

                    b.Property<bool?>("BoolProp1")
                        .HasColumnType("boolean")
                        .HasColumnName("bool_prop_1");

                    b.Property<bool?>("BoolProp2")
                        .HasColumnType("boolean")
                        .HasColumnName("bool_prop_2");

                    b.Property<decimal?>("DecProp1")
                        .HasColumnType("numeric")
                        .HasColumnName("dec_prop_1");

                    b.Property<decimal?>("DecProp2")
                        .HasColumnType("numeric")
                        .HasColumnName("dec_prop_2");

                    b.Property<int?>("IntProp1")
                        .HasColumnType("integer")
                        .HasColumnName("int_prop_1");

                    b.Property<int?>("IntProp2")
                        .HasColumnType("integer")
                        .HasColumnName("int_prop_2");

                    b.Property<long?>("LongProp1")
                        .HasColumnType("bigint")
                        .HasColumnName("long_prop_1");

                    b.Property<long?>("LongProp2")
                        .HasColumnType("bigint")
                        .HasColumnName("long_prop_2");

                    b.Property<string>("StrProp1")
                        .HasColumnType("text")
                        .HasColumnName("str_prop_1");

                    b.Property<string>("StrProp2")
                        .HasColumnType("text")
                        .HasColumnName("str_prop_2");

                    b.Property<string>("StrProp3")
                        .HasColumnType("text")
                        .HasColumnName("str_prop_3");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("text")
                        .HasColumnName("time_zone_id");

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.ToTable("qrtz_simprop_triggers");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnType("text")
                        .HasColumnName("sched_name");

                    b.Property<string>("TriggerName")
                        .HasColumnType("text")
                        .HasColumnName("trigger_name");

                    b.Property<string>("TriggerGroup")
                        .HasColumnType("text")
                        .HasColumnName("trigger_group");

                    b.Property<string>("CalendarName")
                        .HasColumnType("text")
                        .HasColumnName("calendar_name");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long?>("EndTime")
                        .HasColumnType("bigint")
                        .HasColumnName("end_time");

                    b.Property<byte[]>("JobData")
                        .HasColumnType("bytea")
                        .HasColumnName("job_data");

                    b.Property<string>("JobGroup")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("job_group");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("job_name");

                    b.Property<short?>("MisfireInstr")
                        .HasColumnType("smallint")
                        .HasColumnName("misfire_instr");

                    b.Property<long?>("NextFireTime")
                        .HasColumnType("bigint")
                        .HasColumnName("next_fire_time");

                    b.Property<long?>("PrevFireTime")
                        .HasColumnType("bigint")
                        .HasColumnName("prev_fire_time");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint")
                        .HasColumnName("start_time");

                    b.Property<string>("TriggerState")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("trigger_state");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("trigger_type");

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.HasIndex("SchedName", "JobName", "JobGroup");

                    b.HasIndex(new[] { "NextFireTime" }, "idx_qrtz_t_next_fire_time");

                    b.HasIndex(new[] { "NextFireTime", "TriggerState" }, "idx_qrtz_t_nft_st");

                    b.HasIndex(new[] { "TriggerState" }, "idx_qrtz_t_state");

                    b.ToTable("qrtz_triggers");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Book", b =>
                {
                    b.HasOne("JobScheduler.Api.Persistence.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzBlobTrigger", b =>
                {
                    b.HasOne("JobScheduler.Api.Persistence.Models.Quartz.QuartzTrigger", "QuartzTrigger")
                        .WithOne("QuartzBlobTrigger")
                        .HasForeignKey("JobScheduler.Api.Persistence.Models.Quartz.QuartzBlobTrigger", "SchedName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuartzTrigger");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzCronTrigger", b =>
                {
                    b.HasOne("JobScheduler.Api.Persistence.Models.Quartz.QuartzTrigger", "QuartzTrigger")
                        .WithOne("QuartzCronTrigger")
                        .HasForeignKey("JobScheduler.Api.Persistence.Models.Quartz.QuartzCronTrigger", "SchedName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuartzTrigger");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzSimpleTrigger", b =>
                {
                    b.HasOne("JobScheduler.Api.Persistence.Models.Quartz.QuartzTrigger", "QuartzTrigger")
                        .WithOne("QuartzSimpleTrigger")
                        .HasForeignKey("JobScheduler.Api.Persistence.Models.Quartz.QuartzSimpleTrigger", "SchedName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuartzTrigger");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzSimpropTrigger", b =>
                {
                    b.HasOne("JobScheduler.Api.Persistence.Models.Quartz.QuartzTrigger", "QuartzTrigger")
                        .WithOne("QuartzSimpropTrigger")
                        .HasForeignKey("JobScheduler.Api.Persistence.Models.Quartz.QuartzSimpropTrigger", "SchedName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuartzTrigger");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzTrigger", b =>
                {
                    b.HasOne("JobScheduler.Api.Persistence.Models.Quartz.QuartzJobDetail", "QuartzJobDetail")
                        .WithMany("QuartzTriggers")
                        .HasForeignKey("SchedName", "JobName", "JobGroup")
                        .IsRequired();

                    b.Navigation("QuartzJobDetail");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzJobDetail", b =>
                {
                    b.Navigation("QuartzTriggers");
                });

            modelBuilder.Entity("JobScheduler.Api.Persistence.Models.Quartz.QuartzTrigger", b =>
                {
                    b.Navigation("QuartzBlobTrigger")
                        .IsRequired();

                    b.Navigation("QuartzCronTrigger")
                        .IsRequired();

                    b.Navigation("QuartzSimpleTrigger")
                        .IsRequired();

                    b.Navigation("QuartzSimpropTrigger")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
